import asyncio
import pathlib
import random

from aiogram import types, Dispatcher

from db.models.user_db import Users
from db.queries.users import get_main_user_info, update_event_id, update_event_count, update_user_variable, \
    update_user_balance
from image_generate.banda.gum import generate_image_gum
from keyboards.inline.banda.banda_inline import gum_main_keyboard, gum_event_keyboard
from keyboards.inline.banda.banda_inline_callback import banda_callback_data
from misc.user_misc import check_user_characteristics, characteristic_change


async def gum_main(call: types.CallbackQuery):
    await call.answer()
    await call.message.delete()
    text = f'üèãÔ∏è‚Äç‚ôÇÔ∏è –ö–∞—á–∞–ª–∫–∞\n\n' \
           f'–î–ª—è –±–æ–ª—å—à–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–æ –ø–æ–±–µ–¥ –≤ –º–∞—Ö–∞—á–∞—Ö, —Ç–µ–±–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–µ —Ç–æ–ª—å–∫–æ —Å–∞–º–æ–µ –∫—Ä—É—Ç–æ–µ –æ—Ä—É–∂–∏–µ, –Ω–æ –∏ —Å–∏–ª–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n' \
           f'–û–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ –≤ –∫–∞—á–∞–ª–∫–µ —Å—Ç–æ–∏—Ç 500 —Ä—É–±. –∏ –∑–∞—Ç—Ä–∞—á–∏–≤–∞–µ—Ç –≤—Å–µ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞\n' \
           f'–ö–∞–∫ –∏ –≤ –ª—é–±–æ–º —Å–ø–æ—Ä—Ç–µ, —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–µ –≤–∏–¥–µ–Ω —Å—Ä–∞–∑—É, –¥–ª—è –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –æ—Ç–∑–∞–Ω–∏–º–∞—Ç—å—Å—è —Ö–æ—Ç—è –±—ã 5 —Ä–∞–∑\n\n'
    await call.message.answer_photo(open(f'{pathlib.Path().absolute()}/image/gum/profile.png', 'rb'),
                                    caption=text,
                                    reply_markup=await gum_main_keyboard())


async def gum_event(call: types.CallbackQuery):
    db_session = call.message.bot.get('db')
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    await call.answer()

    if user.money < 500:
        await call.message.answer('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤, –æ–¥–Ω–æ –∑–∞–Ω—è—Ç–∏–µ —Å—Ç–æ–∏—Ç 500 —Ä—É–±.')
        return

    if not await check_user_characteristics(db_session, call):
        await call.message.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∞—Ç—å—Å—è, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏')
        return

    event_id = random.randint(1, 3)
    await update_user_balance(db_session, call.from_user.id, 'money', '-', 500)
    await generate_image_gum(event_id, call.from_user.id)
    await call.message.answer_photo(open(f'{pathlib.Path().absolute()}/image/gum/{call.from_user.id}.png', 'rb'),
                                    caption='ü•ä –í—ã –≤—ã—Å–∫–æ—á–∏–ª–∏ –º–∞—Ö–∞—Ü–∞ —Å –¥—Ä—É–≥–∏–º –ø–æ—Å–µ—Ç–∏—Ç–µ–ª–µ–º –∫–∞—á–∞–ª–∫–∏',
                                    reply_markup=await gum_event_keyboard())
    await update_event_id(db_session, call.from_user.id, event_id)
    pathlib.Path(f'{pathlib.Path().absolute()}/image/gum/{call.from_user.id}.png').unlink()


async def gum_event_check(call: types.CallbackQuery, callback_data: dict):
    await call.answer()
    await call.message.delete()
    db_session = call.message.bot.get('db')
    user_answer = int(callback_data.get('type'))
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    text = ''

    if user.event_id == user_answer:
        text += 'üó° –¢—ã –ø–æ–ø–∞–ª –ø—Ä—è–º–æ –≤ —Ü–µ–ª—å'
        await update_event_count(db_session, call.from_user.id, 'gum', '+', 1)
        if (user.info['gum'] + 1) % 5 == 0:
            await update_user_variable(db_session, call.from_user.id, 'power', '+', 1)
            text += '\nüî• –¢–≤–æ–∏ –∑–∞–Ω—è—Ç–∏—è –¥–∞—é—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç ‚ûï 1Ô∏è‚É£ –∫ —É—Ä–æ–Ω—É ü©∏'
    else:
        text = '\nüòû –¢—ã –ø—Ä–æ–º–∞–∑–∞–ª('
    if await characteristic_change(db_session, call.from_user.id):
        await call.message.answer('‚ùå –¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏')
        return

    system_message = await call.message.answer(text)

    await asyncio.sleep(random.randint(3, 7))
    await gum_event(call)
    await system_message.delete()


def register_gum_handlers(dp: Dispatcher):
    dp.register_callback_query_handler(gum_main, banda_callback_data.filter(event='gum', type='gum'),
                                       chat_type='private')
    dp.register_callback_query_handler(gum_event, banda_callback_data.filter(event='start_gum', type='start_gum'),
                                       chat_type='private')
    dp.register_callback_query_handler(gum_event_check, banda_callback_data.filter(event='gum_check'),
                                       chat_type='private')
