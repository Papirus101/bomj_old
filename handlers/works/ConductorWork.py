import asyncio
import datetime
import pathlib
import random

from aiogram import types, Dispatcher

from db.models.user_db import Users
from db.queries.users import get_main_user_info, update_event_id, update_user_balance, update_user_exp, \
    update_works_count
from image_generate.works.conductor import get_fake
from keyboards.inline.works.works_data import works_callback
from keyboards.inline.works.works_inline import start_work_keyb, work_check_keyboard_generator
from misc.convert_money import convert_stats
from misc.user_misc import get_top_by_works, check_user_characteristics, get_total_amount, characteristic_change
from misc.vriables import CONDUCTOR_WORK_KEYBOARD
from static.text.profile import NEW_LEVEL_TEXT


async def work_info(call: types.CallbackQuery, callback_data: dict):
    db_session = call.message.bot.get('db')
    await call.answer()
    await call.message.delete()
    work = callback_data.get('type')
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    await call.message.answer_photo(open(f'{pathlib.Path().absolute()}/image/works/conductor/tralik.png', 'rb'),
                                    caption="üöé –¢–µ–±—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–Ω–¥—É–∫—Ç–æ—Ä–æ–º –≤ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å–µ.\n"
                                            f"–¢–µ–±–µ –ø–ª–∞—Ç—è—Ç –∑–∞ –∫–∞–∂–¥—ã–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ–π–º–∞–Ω–Ω–æ–≥–æ –∑–∞–π—Ü–∞ {convert_stats(money=user.lvl * 30)} —Ä—É–±.\n\n"
                                            "<code>–ü–æ –º–µ—Ä–µ –ø—Ä–æ–∫–∞—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ "
                                            "–ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</code>\n\n"
                                            f'{await get_top_by_works(db_session, work)}\n',
                                    reply_markup=await start_work_keyb(work))


async def send_work(call: types.CallbackQuery):
    db_session = call.message.bot.get('db')
    await get_fake(db_session, call.from_user.id)
    await call.message.answer_photo(
        open(f'{pathlib.Path().absolute()}/image/works/conductor/{call.from_user.id}_event.png', 'rb'),
        caption=f'<code>–°–µ–≥–æ–¥–Ω—è {datetime.date.today().strftime("%d-%m-%Y")}.</code> –ü—Ä–æ–µ–∑–¥–Ω–æ–π —Å—á–∏—Ç–∞–µ—Ç—Å—è –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–º –¥–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è –≤–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ',
        reply_markup=await work_check_keyboard_generator(CONDUCTOR_WORK_KEYBOARD, '5', '–£–≤–æ–ª–∏—Ç—å—Å—è'))
    pathlib.Path(f'{pathlib.Path().absolute()}/image/works/conductor/{call.from_user.id}_event.png').unlink()


async def conductor_start(call: types.CallbackQuery):
    db_session = call.message.bot.get('db')
    await call.answer()
    await call.message.delete()
    if not await check_user_characteristics(db_session, call):
        return
    await update_event_id(db_session, call.from_user.id, 0)
    await send_work(call)


async def conductor_check(call: types.CallbackQuery, callback_data: dict):
    db_session = call.message.bot.get('db')
    user_answer = int(callback_data.get('event'))
    work = callback_data.get('type').split('_')[0]
    random_events_text = ''
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    time_sleep = random.randint(3, 7)

    await call.answer()
    await call.message.delete()

    if user_answer == user.event_id:
        await update_works_count(db_session, call.from_user.id, work)
        if user.event_id == 2:
            total_reward, nalog = await get_total_amount(user.lvl * 25, user.vip)
            if nalog > 0:
                random_events_text = f'üí• –¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É {convert_stats(money=nalog)} —Ä—É–±.'
            await update_user_balance(db_session, call.from_user.id, 'money', '+', total_reward)
            if await update_user_exp(db_session, call.from_user.id, '+', 1, user.vip):
                await call.message.answer(NEW_LEVEL_TEXT)
            system_message = await call.message.answer(
                f'–¢—ã —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä, —Ç–≤–æ—è –∑–∞—Ä–ø–ª–∞—Ç–∞ —Å–æ—Å—Ç–∞–≤–∏–ª–∞ {convert_stats(money=total_reward)} —Ä—É–±.\n'
                f'{random_events_text}\n'
                f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä —É–∂–µ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å, –ø–æ–¥–æ–∂–¥–∏ {time_sleep} —Å–µ–∫.</code>')
        else:
            system_message = await call.message.answer(
                f'–¢—ã —Å–¥–µ–ª–∞–ª –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –≤—ã–±–æ—Ä\n'
                f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä —É–∂–µ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å, –ø–æ–¥–æ–∂–¥–∏ {time_sleep} —Å–µ–∫.</code>')
    else:
        total_reward, nalog = await get_total_amount(user.lvl * 10, user.vip)
        await update_user_balance(db_session, call.from_user.id, 'money', '-', total_reward)
        await update_user_exp(db_session, call.from_user.id, '-', 1, user.vip)
        system_message = await call.message.answer(f'–¢—ã –æ—à–∏–±—Å—è, –∑–∞ —á—Ç–æ –Ω–∞—á–∞–ª—å—Å—Ç–æ –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–ª–æ —Ç–µ–±—è –Ω–∞ {convert_stats(money=total_reward)} —Ä—É–±. –∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–ª 1 –µ–¥. –æ–ø—ã—Ç–∞\n'
                                                   'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–∞—Å—Å–∞–∂–∏—Ä —É–∂–µ –∑–∞—Ö–æ–¥–∏—Ç –≤ —Ç—Ä–æ–ª–ª–µ–π–±—É—Å, –ø–æ–¥–æ–∂–¥–∏ {time_sleep} —Å–µ–∫.</code>')
    if await characteristic_change(db_session, call.from_user.id):
        await call.message.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏')
        return
    await asyncio.sleep(time_sleep)
    await system_message.delete()
    await send_work(call)


def register_conductor_work_handler(dp: Dispatcher):
    dp.register_callback_query_handler(work_info, works_callback.filter(event='info', type='5'), chat_type='private')
    dp.register_callback_query_handler(conductor_start, works_callback.filter(event='start', type='5'),
                                       chat_type='private')
    dp.register_callback_query_handler(conductor_check, works_callback.filter(type='5_check'), chat_type='private')