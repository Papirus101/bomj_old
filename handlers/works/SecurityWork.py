import asyncio
import pathlib
import random

from aiogram import types, Dispatcher

from db.models.user_db import Users
from db.queries.users import get_main_user_info, update_event_id, update_user_balance, update_user_exp, \
    update_works_count
from image_generate.works.security import generate_image, generate_gang_image
from keyboards.inline.works.works_data import works_callback
from keyboards.inline.works.works_inline import start_work_keyb, security_keyboard, security_fight_keyboard
from misc.convert_money import convert_stats
from misc.user_misc import get_top_by_works, check_user_characteristics, get_total_amount, characteristic_change
from static.text.profile import NEW_LEVEL_TEXT


async def work_info(call: types.CallbackQuery, callback_data: dict):
    db_session = call.message.bot.get('db')
    await call.answer()
    await call.message.delete()
    work = callback_data.get('type')
    user = await get_main_user_info(db_session, call.from_user.id)
    await call.message.answer_photo(open(f'{pathlib.Path().absolute()}/image/works/security/larek.png', 'rb'),
                                    caption="üíÇ‚Äç‚ôÇÔ∏è –¢–µ–±—è –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –≤ –º–µ—Å—Ç–Ω—ã–π –ª–∞—Ä—ë–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã –æ—Ö—Ä–∞–Ω–Ω–∏–∫–æ–º.\n"
                                            f"–¢–µ–±–µ –ø–ª–∞—Ç—è—Ç –∑–∞ –∫–∞–∂–¥–æ–≥–æ –ø–æ–π–º–∞–Ω–Ω–æ–≥–æ –≤–æ—Ä–∏—à–∫—É {convert_stats(money=user.lvl * 20 if user.lvl > 0 else 20)} —Ä—É–±.\n\n"
                                            "<code>–ü–æ –º–µ—Ä–µ –ø—Ä–æ–∫–∞—á–∫–∏ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞, —Ç—ã —Å–º–æ–∂–µ—à—å —É—Å—Ç—Ä–∞–∏–≤–∞—Ç—å—Å—è –Ω–∞ –±–æ–ª–µ–µ "
                                            "–ø—Ä–∏–±—ã–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã</code>\n\n"
                                            f'{await get_top_by_works(db_session, work)}\n',
                                    reply_markup=await start_work_keyb(work))


async def send_work(call: types.CallbackQuery, fight: bool = False):
    db_session = call.message.bot.get('db')

    event_id = random.randint(1, 3)
    await update_event_id(db_session, call.from_user.id, event_id)
    if fight:
        await generate_gang_image(event_id, call.from_user.id)
        await call.message.answer_photo(
            open(f'{pathlib.Path().absolute()}/image/works/security/{call.from_user.id}_bomjgang.png', 'rb'),
            caption='–í—ã–±–µ—Ä–∏ –º–µ—Å—Ç–æ –¥–ª—è —É–¥–∞—Ä–∞, –∫—É–¥–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –ø—Ä–∏—Ü–µ–ª',
            reply_markup=await security_fight_keyboard())
        pathlib.Path(f'{pathlib.Path().absolute()}/image/works/security/{call.from_user.id}_bomjgang.png').unlink()
        return
    await generate_image(event_id, call.from_user.id)
    await call.message.answer_photo(
        open(f'{pathlib.Path().absolute()}/image/works/security/{call.from_user.id}_security.png', 'rb'),
        reply_markup=await security_keyboard('3', '–£–≤–æ–ª–∏—Ç—å—Å—è'))
    pathlib.Path(f'{pathlib.Path().absolute()}/image/works/security/{call.from_user.id}_security.png').unlink()


async def security_start(call: types.CallbackQuery):
    db_session = call.message.bot.get('db')
    await call.answer()
    await call.message.delete()
    if not await check_user_characteristics(db_session, call):
        return
    await update_event_id(db_session, call.from_user.id, 0)
    await send_work(call)


async def check_security_answer(call: types.CallbackQuery, callback_data: dict):
    db_session = call.message.bot.get('db')
    user_answer = callback_data.get('event')
    work = callback_data.get('type').split('_')[0]
    random_events_text = ''
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    time_sleep = random.randint(3, 7)

    await call.answer()
    await call.message.delete()

    if user.event_id == int(user_answer) and user.event_id == 1:
        system_message = await call.message.answer('–≠—Ç–æ –±—ã–ª –æ–±—ã—á–Ω—ã–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è\n'
                                  f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Å—Å–µ, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–º–æ —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {time_sleep} —Å–µ–∫.</code>')
    elif user.event_id == int(user_answer) and user.event_id == 2:
        total_reward, nalog = await get_total_amount(user.lvl * 20 if user.lvl > 0 else 20, user.vip)
        if nalog > 0:
            random_events_text = f'üí• –¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É {convert_stats(money=nalog)} —Ä—É–±.'
        await update_user_balance(db_session, call.from_user.id, 'money', '+', total_reward)
        if await update_user_exp(db_session, call.from_user.id, '+', 1, user.vip):
            await call.message.answer(NEW_LEVEL_TEXT)
        await update_works_count(db_session, call.from_user.id, work)
        system_message = await call.message.answer(f'–¢—ã –ø–æ–π–º–∞–ª –∑–ª–æ—à–Ω–æ–≥–æ –Ω–∞—Ä—É—à–∏—Ç–µ–ª—è, –∫–æ—Ç–æ—Ä—ã–π –ø—ã—Ç–∞–ª—Å—è —É–∫—Ä–∞—Å—Ç—å —Ç–æ–≤–∞—Ä –∏–∑ –º–∞–≥–∞–∑–∏–Ω–∞, —Ç–≤–æ–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫ {convert_stats(money=total_reward)} —Ä—É–±.\n'
                                  f'{random_events_text}\n'
                                  f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Å—Å–µ, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–º–æ —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {time_sleep} —Å–µ–∫.</code>')
    elif int(user_answer) == 2 and user.event_id == 3:
        system_message = await call.message.answer('–í –º–∞–≥–∞–∑–∏–Ω –æ–ø—è—Ç—å –ø—Ä–∏—à—ë–ª –ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏–π –∏ –ø—ã—Ç–∞–µ—Ç—Å—è –≤–∞—Å –æ–≥—Ä–∞–±–∏—Ç—å, –¥–∞–π –µ–º—É –æ—Ç–ø–æ—Ä –∏–ª–∏ –æ–Ω –≤—ã—Ä—É–±–∏—Ç —Ç–µ–±—è')
        await send_work(call, True)
        await system_message.delete()
        return
    else:
        total_reward, nalog = await get_total_amount(user.lvl * 10, user.vip)
        await update_user_balance(db_session, call.from_user.id, 'money', '-', total_reward)
        await update_user_exp(db_session, call.from_user.id, '-', 1, user.vip)
        system_message = await call.message.answer(f'–¢—ã –æ—à–∏–±—Å—è –≤ —Å–≤–æ—ë–º –≤—ã–±–æ—Ä–µ, –∞ –≤–µ–¥—å –≤–æ–∑–º–æ–∂–Ω–æ —ç—Ç–æ –±—ã–ª –æ—á–µ—Ä–µ–¥–Ω–æ–π –≤–æ—Ä–∏—à–∫–∞, –Ω–∞—á–∞–ª—å—Å—Ç–≤–æ –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞–ª–æ —Ç–µ–±—è –Ω–∞ {total_reward} —Ä—É–±. –∏ —Ç—ã –ø–æ—Ç–µ—Ä—è–ª 1 –µ–¥. –æ–ø—ã—Ç–∞'
                                  f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Å—Å–µ, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–º–æ —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {time_sleep} —Å–µ–∫.</code>')
    if user.event_id != 1:
        if await characteristic_change(db_session, call.from_user.id):
            await call.message.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏')
            return
    await asyncio.sleep(time_sleep)
    await system_message.delete()
    await send_work(call)


async def check_fight(call: types.CallbackQuery, callback_data: dict):
    db_session = call.message.bot.get('db')
    user_answer = int(callback_data.get('event'))
    user: Users = await get_main_user_info(db_session, call.from_user.id)
    random_events_text = ''
    work = '3'
    time_sleep = random.randint(3, 7)

    await call.answer()
    await call.message.delete()

    if user_answer == user.event_id:
        total_reward, nalog = await get_total_amount(user.lvl * 22, user.vip)
        if nalog > 0:
            random_events_text = f'üí• –¢—ã –∑–∞–ø–ª–∞—Ç–∏–ª –Ω–∞–ª–æ–≥ –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤—É {convert_stats(money=nalog)} —Ä—É–±.'
        await update_user_balance(db_session, call.from_user.id, 'money', '+', total_reward)
        if await update_user_exp(db_session, call.from_user.id, '+', 1, user.vip):
            await call.message.answer(NEW_LEVEL_TEXT)
        await update_works_count(db_session, call.from_user.id, work)
        system_message = await call.message.answer(
            f'–¢—ã –¥–∞–ª –æ—Ç–ø–æ—Ä –ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏—é, –∑–∞ —á—Ç–æ —Ç–µ–±–µ –≤—ã–ø–∏—Å–∞–ª–∏ –ø—Ä–µ–º–∏—é –≤ —Ä–∞–∑–º–µ—Ä–µ {convert_stats(money=total_reward)} —Ä—É–±.\n'
            f'{random_events_text}\n'
            f'üèÉ <code>–°–ª–µ–¥—É—é—â–∏–π –ø–æ–∫—É–ø–∞—Ç–µ–ª—å —É–∂–µ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—Ç—Å—è –Ω–∞ –∫–∞—Å—Å–µ, –æ–Ω –±—É–¥–µ—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å –º–∏–º–æ —Ç–µ–±—è –ø—Ä–∏–º–µ—Ä–Ω–æ —á–µ—Ä–µ–∑ {time_sleep} —Å–µ–∫.</code>')
    else:
        time_sleep = random.randint(10, 20)
        total_reward, nalog = await get_total_amount(user.lvl * 10, user.vip)
        await update_user_balance(db_session, call.from_user.id, 'money', '-', total_reward)
        await update_user_exp(db_session, call.from_user.id, '-', 1, user.vip)
        system_message = await call.message.answer(f'–¢—ã –Ω–µ —Å–º–æ–≥ –¥–∞—Ç—å –æ—Ç–ø–æ—Ä –ò–Ω–Ω–æ–∫–µ–Ω—Ç–∏—é, –∏–∑-–∑–∞ —á–µ–≥–æ –æ–Ω —Å–º–æ–≥ –æ–≥—Ä–∞–±–∏—Ç—å –º–∞–≥–∞–∑–∏–Ω, —Ç—ã –ø–æ–Ω—ë—Å –Ω–∞–∫–∞–∑–∞–Ω–∏–µ –≤ —Ä–∞–∑–º–µ—Ä–µ {convert_stats(money=total_reward)} —Ä—É–±. –∏ 1 –µ–¥. –æ–ø—ã—Ç–∞\n'
                                  f'üèÉ –¢–µ–±–µ –ø—Ä–∏—à–ª–æ—Å—å –ø—Ä–æ–µ—Ö–∞—Ç—å –≤ –º–µ—Å—Ç–Ω—ã–π —Ç—Ä–∞–≤–º–ø—É–Ω–∫—Ç, –∏–∑-–∑–∞ —á–µ–≥–æ —Ç—ã —Å–º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Ä–∞–±–æ—Ç—É —Ç–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ {time_sleep} —Å–µ–∫.')
    if await characteristic_change(db_session, call.from_user.id):
        await call.message.answer('–¢—ã –Ω–µ –º–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ä–∞–±–æ—Ç—É, –ø—Ä–æ–≤–µ—Ä—å —Å–≤–æ–∏ –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç–∏')
        return
    await asyncio.sleep(time_sleep)
    await system_message.delete()
    await send_work(call)


def register_security_work_handler(dp: Dispatcher):
    dp.register_callback_query_handler(work_info, works_callback.filter(event='info', type='3'), chat_type='private')
    dp.register_callback_query_handler(security_start, works_callback.filter(event='start', type='3'), chat_type='private')
    dp.register_callback_query_handler(check_security_answer, works_callback.filter(type='3_check'), chat_type='private')
    dp.register_callback_query_handler(check_fight, works_callback.filter(type='security_fight'), chat_type='private')